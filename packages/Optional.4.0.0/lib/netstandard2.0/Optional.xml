<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Optional</name>
    </assembly>
    <members>
        <member name="M:Optional.Collections.OptionCollectionExtensions.Values``1(System.Collections.Generic.IEnumerable{Optional.Option{``0}})">
            <summary>
            Flattens a sequence of optionals into a sequence containing all inner values.
            Empty elements are discarded.
            </summary>
            <param name="source">The sequence of optionals.</param>
            <returns>A flattened sequence of values.</returns>
        </member>
        <member name="M:Optional.Collections.OptionCollectionExtensions.Values``2(System.Collections.Generic.IEnumerable{Optional.Option{``0,``1}})">
            <summary>
            Flattens a sequence of optionals into a sequence containing all inner values.
            Empty elements and their exceptional values are discarded.
            </summary>
            <param name="source">The sequence of optionals.</param>
            <returns>A flattened sequence of values.</returns>
        </member>
        <member name="M:Optional.Collections.OptionCollectionExtensions.Exceptions``2(System.Collections.Generic.IEnumerable{Optional.Option{``0,``1}})">
            <summary>
            Flattens a sequence of optionals into a sequence containing all exceptional values.
            Non-empty elements and their values are discarded.
            </summary>
            <param name="source">The sequence of optionals.</param>
            <returns>A flattened sequence of exceptional values.</returns>
        </member>
        <member name="M:Optional.Collections.OptionCollectionExtensions.GetValueOrNone``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},``0)">
            <summary>
            Returns the value associated with the specified key if such exists.
            A dictionary lookup will be used if available, otherwise falling
            back to a linear scan of the enumerable.
            </summary>
            <param name="source">The dictionary or enumerable in which to locate the key.</param>
            <param name="key">The key to locate.</param>
            <returns>An Option&lt;TValue&gt; instance containing the associated value if located.</returns>
        </member>
        <member name="M:Optional.Collections.OptionCollectionExtensions.FirstOrNone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of a sequence if such exists.
            </summary>
            <param name="source">The sequence to return the first element from.</param>
            <returns>An Option&lt;T&gt; instance containing the first element if present.</returns>
        </member>
        <member name="M:Optional.Collections.OptionCollectionExtensions.FirstOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of a sequence, satisfying a specified predicate, 
            if such exists.
            </summary>
            <param name="source">The sequence to return the first element from.</param>
            <param name="predicate">The predicate to filter by.</param>
            <returns>An Option&lt;T&gt; instance containing the first element if present.</returns>
        </member>
        <member name="M:Optional.Collections.OptionCollectionExtensions.LastOrNone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last element of a sequence if such exists.
            </summary>
            <param name="source">The sequence to return the last element from.</param>
            <returns>An Option&lt;T&gt; instance containing the last element if present.</returns>
        </member>
        <member name="M:Optional.Collections.OptionCollectionExtensions.LastOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of a sequence, satisfying a specified predicate, 
            if such exists.
            </summary>
            <param name="source">The sequence to return the last element from.</param>
            <param name="predicate">The predicate to filter by.</param>
            <returns>An Option&lt;T&gt; instance containing the last element if present.</returns>
        </member>
        <member name="M:Optional.Collections.OptionCollectionExtensions.SingleOrNone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a single element from a sequence, if it exists 
            and is the only element in the sequence.
            </summary>
            <param name="source">The sequence to return the element from.</param>
            <returns>An Option&lt;T&gt; instance containing the element if present.</returns>
        </member>
        <member name="M:Optional.Collections.OptionCollectionExtensions.SingleOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a single element from a sequence, satisfying a specified predicate, 
            if it exists and is the only element in the sequence.
            </summary>
            <param name="source">The sequence to return the element from.</param>
            <param name="predicate">The predicate to filter by.</param>
            <returns>An Option&lt;T&gt; instance containing the element if present.</returns>
        </member>
        <member name="M:Optional.Collections.OptionCollectionExtensions.ElementAtOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns an element at a specified position in a sequence if such exists.
            </summary>
            <param name="source">The sequence to return the element from.</param>
            <param name="index">The index in the sequence.</param>
            <returns>An Option&lt;T&gt; instance containing the element if found.</returns>
        </member>
        <member name="T:Optional.Option">
            <summary>
            Provides a set of functions for creating optional values.
            </summary>
        </member>
        <member name="M:Optional.Option.Some``1(``0)">
            <summary>
            Wraps an existing value in an Option&lt;T&gt; instance.
            </summary>
            <param name="value">The value to be wrapped.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optional.Option.Some``2(``0)">
            <summary>
            Wraps an existing value in an Option&lt;T, TException&gt; instance.
            </summary>
            <param name="value">The value to be wrapped.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optional.Option.None``1">
            <summary>
            Creates an empty Option&lt;T&gt; instance.
            </summary>
            <returns>An empty optional.</returns>
        </member>
        <member name="M:Optional.Option.None``2(``1)">
            <summary>
            Creates an empty Option&lt;T, TException&gt; instance, 
            with a specified exceptional value.
            </summary>
            <param name="exception">The exceptional value.</param>
            <returns>An empty optional.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.Some``1(``0)">
            <summary>
            Wraps an existing value in an Option&lt;T&gt; instance.
            </summary>
            <param name="value">The value to be wrapped.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.Some``2(``0)">
            <summary>
            Wraps an existing value in an Option&lt;T, TException&gt; instance.
            </summary>
            <param name="value">The value to be wrapped.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.None``1(``0)">
            <summary>
            Creates an empty Option&lt;T&gt; instance from a specified value.
            </summary>
            <param name="value">A value determining the type of the optional.</param>
            <returns>An empty optional.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.None``2(``0,``1)">
            <summary>
            Creates an empty Option&lt;T, TException&gt; instance, 
            with a specified exceptional value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="exception">The exceptional value.</param>
            <returns>An empty optional.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.SomeWhen``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            Creates an Option&lt;T&gt; instance from a specified value. 
            If the value does not satisfy the given predicate, 
            an empty optional is returned.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="predicate">The predicate.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.SomeWhen``2(``0,System.Func{``0,System.Boolean},``1)">
            <summary>
            Creates an Option&lt;T&gt; instance from a specified value. 
            If the value does not satisfy the given predicate, 
            an empty optional is returned, with a specified exceptional value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="predicate">The predicate.</param>
            <param name="exception">The exceptional value.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.SomeWhen``2(``0,System.Func{``0,System.Boolean},System.Func{``1})">
            <summary>
            Creates an Option&lt;T&gt; instance from a specified value. 
            If the value does not satisfy the given predicate, 
            an empty optional is returned, with a specified exceptional value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="predicate">The predicate.</param>
            <param name="exceptionFactory">A factory function to create an exceptional value.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.NoneWhen``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            Creates an Option&lt;T&gt; instance from a specified value. 
            If the value satisfies the given predicate, 
            an empty optional is returned.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="predicate">The predicate.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.NoneWhen``2(``0,System.Func{``0,System.Boolean},``1)">
            <summary>
            Creates an Option&lt;T&gt; instance from a specified value. 
            If the value satisfies the given predicate, 
            an empty optional is returned, with a specified exceptional value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="predicate">The predicate.</param>
            <param name="exception">The exceptional value.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.NoneWhen``2(``0,System.Func{``0,System.Boolean},System.Func{``1})">
            <summary>
            Creates an Option&lt;T&gt; instance from a specified value. 
            If the value does satisfy the given predicate, 
            an empty optional is returned, with a specified exceptional value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="predicate">The predicate.</param>
            <param name="exceptionFactory">A factory function to create an exceptional value.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.SomeNotNull``1(``0)">
            <summary>
            Creates an Option&lt;T&gt; instance from a specified value. 
            If the value is null, an empty optional is returned.
            </summary>
            <param name="value">The value to wrap.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.SomeNotNull``2(``0,``1)">
            <summary>
            Creates an Option&lt;T&gt; instance from a specified value. 
            If the value is null, an empty optional is returned, 
            with a specified exceptional value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="exception">The exceptional value.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.SomeNotNull``2(``0,System.Func{``1})">
            <summary>
            Creates an Option&lt;T&gt; instance from a specified value. 
            If the value is null, an empty optional is returned, 
            with a specified exceptional value.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="exceptionFactory">A factory function to create an exceptional value.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.ToOption``1(System.Nullable{``0})">
            <summary>
            Converts a Nullable&lt;T&gt; to an Option&lt;T&gt; instance.
            </summary>
            <param name="value">The Nullable&lt;T&gt; instance.</param>
            <returns>The Option&lt;T&gt; instance.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.ToOption``2(System.Nullable{``0},``1)">
            <summary>
            Converts a Nullable&lt;T&gt; to an Option&lt;T, TException&gt; instance, 
            with a specified exceptional value.
            </summary>
            <param name="value">The Nullable&lt;T&gt; instance.</param>
            <param name="exception">The exceptional value.</param>
            <returns>The Option&lt;T, TException&gt; instance.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.ToOption``2(System.Nullable{``0},System.Func{``1})">
            <summary>
            Converts a Nullable&lt;T&gt; to an Option&lt;T, TException&gt; instance, 
            with a specified exceptional value.
            </summary>
            <param name="value">The Nullable&lt;T&gt; instance.</param>
            <param name="exceptionFactory">A factory function to create an exceptional value.</param>
            <returns>The Option&lt;T, TException&gt; instance.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.ValueOrException``1(Optional.Option{``0,``0})">
            <summary>
            Returns the existing value if present, or the attached 
            exceptional value.
            </summary>
            <param name="option">The specified optional.</param>
            <returns>The existing or exceptional value.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.Flatten``1(Optional.Option{Optional.Option{``0}})">
            <summary>
            Flattens two nested optionals into one. The resulting optional
            will be empty if either the inner or outer optional is empty.
            </summary>
            <param name="option">The nested optional.</param>
            <returns>A flattened optional.</returns>
        </member>
        <member name="M:Optional.OptionExtensions.Flatten``2(Optional.Option{Optional.Option{``0,``1},``1})">
            <summary>
            Flattens two nested optionals into one. The resulting optional
            will be empty if either the inner or outer optional is empty.
            </summary>
            <param name="option">The nested optional.</param>
            <returns>A flattened optional.</returns>
        </member>
        <member name="T:Optional.Option`2">
            <summary>
            Represents an optional value, along with a potential exceptional value.
            </summary>
            <typeparam name="T">The type of the value to be wrapped.</typeparam>
            <typeparam name="TException">A exceptional value describing the lack of an actual value.</typeparam>
        </member>
        <member name="P:Optional.Option`2.HasValue">
            <summary>
            Checks if a value is present.
            </summary>
        </member>
        <member name="M:Optional.Option`2.Equals(Optional.Option{`0,`1})">
            <summary>
            Determines whether two optionals are equal.
            </summary>
            <param name="other">The optional to compare with the current one.</param>
            <returns>A boolean indicating whether or not the optionals are equal.</returns>
        </member>
        <member name="M:Optional.Option`2.Equals(System.Object)">
            <summary>
            Determines whether two optionals are equal.
            </summary>
            <param name="obj">The optional to compare with the current one.</param>
            <returns>A boolean indicating whether or not the optionals are equal.</returns>
        </member>
        <member name="M:Optional.Option`2.op_Equality(Optional.Option{`0,`1},Optional.Option{`0,`1})">
            <summary>
            Determines whether two optionals are equal.
            </summary>
            <param name="left">The first optional to compare.</param>
            <param name="right">The second optional to compare.</param>
            <returns>A boolean indicating whether or not the optionals are equal.</returns>
        </member>
        <member name="M:Optional.Option`2.op_Inequality(Optional.Option{`0,`1},Optional.Option{`0,`1})">
            <summary>
            Determines whether two optionals are unequal.
            </summary>
            <param name="left">The first optional to compare.</param>
            <param name="right">The second optional to compare.</param>
            <returns>A boolean indicating whether or not the optionals are unequal.</returns>
        </member>
        <member name="M:Optional.Option`2.GetHashCode">
            <summary>
            Generates a hash code for the current optional.
            </summary>
            <returns>A hash code for the current optional.</returns>
        </member>
        <member name="M:Optional.Option`2.CompareTo(Optional.Option{`0,`1})">
            <summary>
            Compares the relative order of two optionals. An empty optional is
            ordered by its exceptional value and always before a non-empty one.
            </summary>
            <param name="other">The optional to compare with the current one.</param>
            <returns>An integer indicating the relative order of the optionals being compared.</returns>
        </member>
        <member name="M:Optional.Option`2.op_LessThan(Optional.Option{`0,`1},Optional.Option{`0,`1})">
            <summary>
            Determines if an optional is less than another optional.
            </summary>
            <param name="left">The first optional to compare.</param>
            <param name="right">The second optional to compare.</param>
            <returns>A boolean indicating whether or not the left optional is less than the right optional.</returns>
        </member>
        <member name="M:Optional.Option`2.op_LessThanOrEqual(Optional.Option{`0,`1},Optional.Option{`0,`1})">
            <summary>
            Determines if an optional is less than or equal to another optional.
            </summary>
            <param name="left">The first optional to compare.</param>
            <param name="right">The second optional to compare.</param>
            <returns>A boolean indicating whether or not the left optional is less than or equal the right optional.</returns>
        </member>
        <member name="M:Optional.Option`2.op_GreaterThan(Optional.Option{`0,`1},Optional.Option{`0,`1})">
            <summary>
            Determines if an optional is greater than another optional.
            </summary>
            <param name="left">The first optional to compare.</param>
            <param name="right">The second optional to compare.</param>
            <returns>A boolean indicating whether or not the left optional is greater than the right optional.</returns>
        </member>
        <member name="M:Optional.Option`2.op_GreaterThanOrEqual(Optional.Option{`0,`1},Optional.Option{`0,`1})">
            <summary>
            Determines if an optional is greater than or equal to another optional.
            </summary>
            <param name="left">The first optional to compare.</param>
            <param name="right">The second optional to compare.</param>
            <returns>A boolean indicating whether or not the left optional is greater than or equal the right optional.</returns>
        </member>
        <member name="M:Optional.Option`2.ToString">
            <summary>
            Returns a string that represents the current optional.
            </summary>
            <returns>A string that represents the current optional.</returns>
        </member>
        <member name="M:Optional.Option`2.ToEnumerable">
            <summary>
            Converts the current optional into an enumerable with one or zero elements.
            </summary>
            <returns>A corresponding enumerable.</returns>
        </member>
        <member name="M:Optional.Option`2.GetEnumerator">
            <summary>
            Returns an enumerator for the optional.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Optional.Option`2.Contains(`0)">
            <summary>
            Determines if the current optional contains a specified value.
            </summary>
            <param name="value">The value to locate.</param>
            <returns>A boolean indicating whether or not the value was found.</returns>
        </member>
        <member name="M:Optional.Option`2.Exists(System.Func{`0,System.Boolean})">
            <summary>
            Determines if the current optional contains a value 
            satisfying a specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>A boolean indicating whether or not the predicate was satisfied.</returns>
        </member>
        <member name="M:Optional.Option`2.ValueOr(`0)">
            <summary>
            Returns the existing value if present, and otherwise an alternative value.
            </summary>
            <param name="alternative">The alternative value.</param>
            <returns>The existing or alternative value.</returns>
        </member>
        <member name="M:Optional.Option`2.ValueOr(System.Func{`0})">
            <summary>
            Returns the existing value if present, and otherwise an alternative value.
            </summary>
            <param name="alternativeFactory">A factory function to create an alternative value.</param>
            <returns>The existing or alternative value.</returns>
        </member>
        <member name="M:Optional.Option`2.ValueOr(System.Func{`1,`0})">
            <summary>
            Returns the existing value if present, and otherwise an alternative value.
            </summary>
            <param name="alternativeFactory">A factory function to map the exceptional value to an alternative value.</param>
            <returns>The existing or alternative value.</returns>
        </member>
        <member name="M:Optional.Option`2.Or(`0)">
            <summary>
            Uses an alternative value, if no existing value is present.
            </summary>
            <param name="alternative">The alternative value.</param>
            <returns>A new optional, containing either the existing or alternative value.</returns>
        </member>
        <member name="M:Optional.Option`2.Or(System.Func{`0})">
            <summary>
            Uses an alternative value, if no existing value is present.
            </summary>
            <param name="alternativeFactory">A factory function to create an alternative value.</param>
            <returns>A new optional, containing either the existing or alternative value.</returns>
        </member>
        <member name="M:Optional.Option`2.Or(System.Func{`1,`0})">
            <summary>
            Uses an alternative value, if no existing value is present.
            </summary>
            <param name="alternativeFactory">A factory function to map the exceptional value to an alternative value.</param>
            <returns>A new optional, containing either the existing or alternative value.</returns>
        </member>
        <member name="M:Optional.Option`2.Else(Optional.Option{`0,`1})">
            <summary>
            Uses an alternative optional, if no existing value is present.
            </summary>
            <param name="alternativeOption">The alternative optional.</param>
            <returns>The alternative optional, if no value is present, otherwise itself.</returns>
        </member>
        <member name="M:Optional.Option`2.Else(System.Func{Optional.Option{`0,`1}})">
            <summary>
            Uses an alternative optional, if no existing value is present.
            </summary>
            <param name="alternativeOptionFactory">A factory function to create an alternative optional.</param>
            <returns>The alternative optional, if no value is present, otherwise itself.</returns>
        </member>
        <member name="M:Optional.Option`2.Else(System.Func{`1,Optional.Option{`0,`1}})">
            <summary>
            Uses an alternative optional, if no existing value is present.
            </summary>
            <param name="alternativeOptionFactory">A factory function to map the exceptional value to an alternative optional.</param>
            <returns>The alternative optional, if no value is present, otherwise itself.</returns>
        </member>
        <member name="M:Optional.Option`2.WithoutException">
            <summary>
            Forgets any attached exceptional value.
            </summary>
            <returns>An optional without an exceptional value.</returns>
        </member>
        <member name="M:Optional.Option`2.Match``1(System.Func{`0,``0},System.Func{`1,``0})">
            <summary>
            Evaluates a specified function, based on whether a value is present or not.
            </summary>
            <param name="some">The function to evaluate if the value is present.</param>
            <param name="none">The function to evaluate if the value is missing.</param>
            <returns>The result of the evaluated function.</returns>
        </member>
        <member name="M:Optional.Option`2.Match(System.Action{`0},System.Action{`1})">
            <summary>
            Evaluates a specified action, based on whether a value is present or not.
            </summary>
            <param name="some">The action to evaluate if the value is present.</param>
            <param name="none">The action to evaluate if the value is missing.</param>
        </member>
        <member name="M:Optional.Option`2.MatchSome(System.Action{`0})">
            <summary>
            Evaluates a specified action if a value is present.
            </summary>
            <param name="some">The action to evaluate if the value is present.</param>
        </member>
        <member name="M:Optional.Option`2.MatchNone(System.Action{`1})">
            <summary>
            Evaluates a specified action if no value is present.
            </summary>
            <param name="none">The action to evaluate if the value is missing.</param>
        </member>
        <member name="M:Optional.Option`2.Map``1(System.Func{`0,``0})">
            <summary>
            Transforms the inner value in an optional.
            If the instance is empty, an empty optional is returned.
            </summary>
            <param name="mapping">The transformation function.</param>
            <returns>The transformed optional.</returns>
        </member>
        <member name="M:Optional.Option`2.MapException``1(System.Func{`1,``0})">
            <summary>
            Transforms the exceptional value in an optional.
            If the instance is not empty, no transformation is carried out.
            </summary>
            <param name="mapping">The transformation function.</param>
            <returns>The transformed optional.</returns>
        </member>
        <member name="M:Optional.Option`2.FlatMap``1(System.Func{`0,Optional.Option{``0,`1}})">
            <summary>
            Transforms the inner value in an optional
            into another optional. The result is flattened, 
            and if either is empty, an empty optional is returned.
            </summary>
            <param name="mapping">The transformation function.</param>
            <returns>The transformed optional.</returns>
        </member>
        <member name="M:Optional.Option`2.FlatMap``1(System.Func{`0,Optional.Option{``0}},`1)">
            <summary>
            Transforms the inner value in an optional
            into another optional. The result is flattened, 
            and if either is empty, an empty optional is returned, 
            with a specified exceptional value.
            </summary>
            <param name="mapping">The transformation function.</param>
            <param name="exception">The exceptional value to attach.</param>
            <returns>The transformed optional.</returns>
        </member>
        <member name="M:Optional.Option`2.FlatMap``1(System.Func{`0,Optional.Option{``0}},System.Func{`1})">
            <summary>
            Transforms the inner value in an optional
            into another optional. The result is flattened, 
            and if either is empty, an empty optional is returned, 
            with a specified exceptional value.
            </summary>
            <param name="mapping">The transformation function.</param>
            <param name="exceptionFactory">A factory function to create an exceptional value to attach.</param>
            <returns>The transformed optional.</returns>
        </member>
        <member name="M:Optional.Option`2.Filter(System.Boolean,`1)">
            <summary>
            Empties an optional, and attaches an exceptional value, 
            if a specified condition is not satisfied.
            </summary>
            <param name="condition">The condition.</param>
            <param name="exception">The exceptional value to attach.</param>
            <returns>The filtered optional.</returns>
        </member>
        <member name="M:Optional.Option`2.Filter(System.Boolean,System.Func{`1})">
            <summary>
            Empties an optional, and attaches an exceptional value, 
            if a specified condition is not satisfied.
            </summary>
            <param name="condition">The condition.</param>
            <param name="exceptionFactory">A factory function to create an exceptional value to attach.</param>
            <returns>The filtered optional.</returns>
        </member>
        <member name="M:Optional.Option`2.Filter(System.Func{`0,System.Boolean},`1)">
            <summary>
            Empties an optional, and attaches an exceptional value, 
            if a specified predicate is not satisfied.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="exception">The exceptional value to attach.</param>
            <returns>The filtered optional.</returns>
        </member>
        <member name="M:Optional.Option`2.Filter(System.Func{`0,System.Boolean},System.Func{`1})">
            <summary>
            Empties an optional, and attaches an exceptional value, 
            if a specified predicate is not satisfied.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="exceptionFactory">A factory function to create an exceptional value to attach.</param>
            <returns>The filtered optional.</returns>
        </member>
        <member name="M:Optional.Option`2.NotNull(`1)">
            <summary>
            Empties an optional, and attaches an exceptional value, 
            if the value is null.
            </summary>
            <param name="exception">The exceptional value to attach.</param>
            <returns>The filtered optional.</returns>
        </member>
        <member name="M:Optional.Option`2.NotNull(System.Func{`1})">
            <summary>
            Empties an optional, and attaches an exceptional value, 
            if the value is null.
            </summary>
            <param name="exceptionFactory">A factory function to create an exceptional value to attach.</param>
            <returns>The filtered optional.</returns>
        </member>
        <member name="T:Optional.Option`1">
            <summary>
            Represents an optional value.
            </summary>
            <typeparam name="T">The type of the value to be wrapped.</typeparam>
        </member>
        <member name="P:Optional.Option`1.HasValue">
            <summary>
            Checks if a value is present.
            </summary>
        </member>
        <member name="M:Optional.Option`1.Equals(Optional.Option{`0})">
            <summary>
            Determines whether two optionals are equal.
            </summary>
            <param name="other">The optional to compare with the current one.</param>
            <returns>A boolean indicating whether or not the optionals are equal.</returns>
        </member>
        <member name="M:Optional.Option`1.Equals(System.Object)">
            <summary>
            Determines whether two optionals are equal.
            </summary>
            <param name="obj">The optional to compare with the current one.</param>
            <returns>A boolean indicating whether or not the optionals are equal.</returns>
        </member>
        <member name="M:Optional.Option`1.op_Equality(Optional.Option{`0},Optional.Option{`0})">
            <summary>
            Determines whether two optionals are equal.
            </summary>
            <param name="left">The first optional to compare.</param>
            <param name="right">The second optional to compare.</param>
            <returns>A boolean indicating whether or not the optionals are equal.</returns>
        </member>
        <member name="M:Optional.Option`1.op_Inequality(Optional.Option{`0},Optional.Option{`0})">
            <summary>
            Determines whether two optionals are unequal.
            </summary>
            <param name="left">The first optional to compare.</param>
            <param name="right">The second optional to compare.</param>
            <returns>A boolean indicating whether or not the optionals are unequal.</returns>
        </member>
        <member name="M:Optional.Option`1.GetHashCode">
            <summary>
            Generates a hash code for the current optional.
            </summary>
            <returns>A hash code for the current optional.</returns>
        </member>
        <member name="M:Optional.Option`1.CompareTo(Optional.Option{`0})">
            <summary>
            Compares the relative order of two optionals. An empty optional is
            ordered before a non-empty one.
            </summary>
            <param name="other">The optional to compare with the current one.</param>
            <returns>An integer indicating the relative order of the optionals being compared.</returns>
        </member>
        <member name="M:Optional.Option`1.op_LessThan(Optional.Option{`0},Optional.Option{`0})">
            <summary>
            Determines if an optional is less than another optional.
            </summary>
            <param name="left">The first optional to compare.</param>
            <param name="right">The second optional to compare.</param>
            <returns>A boolean indicating whether or not the left optional is less than the right optional.</returns>
        </member>
        <member name="M:Optional.Option`1.op_LessThanOrEqual(Optional.Option{`0},Optional.Option{`0})">
            <summary>
            Determines if an optional is less than or equal to another optional.
            </summary>
            <param name="left">The first optional to compare.</param>
            <param name="right">The second optional to compare.</param>
            <returns>A boolean indicating whether or not the left optional is less than or equal the right optional.</returns>
        </member>
        <member name="M:Optional.Option`1.op_GreaterThan(Optional.Option{`0},Optional.Option{`0})">
            <summary>
            Determines if an optional is greater than another optional.
            </summary>
            <param name="left">The first optional to compare.</param>
            <param name="right">The second optional to compare.</param>
            <returns>A boolean indicating whether or not the left optional is greater than the right optional.</returns>
        </member>
        <member name="M:Optional.Option`1.op_GreaterThanOrEqual(Optional.Option{`0},Optional.Option{`0})">
            <summary>
            Determines if an optional is greater than or equal to another optional.
            </summary>
            <param name="left">The first optional to compare.</param>
            <param name="right">The second optional to compare.</param>
            <returns>A boolean indicating whether or not the left optional is greater than or equal the right optional.</returns>
        </member>
        <member name="M:Optional.Option`1.ToString">
            <summary>
            Returns a string that represents the current optional.
            </summary>
            <returns>A string that represents the current optional.</returns>
        </member>
        <member name="M:Optional.Option`1.ToEnumerable">
            <summary>
            Converts the current optional into an enumerable with one or zero elements.
            </summary>
            <returns>A corresponding enumerable.</returns>
        </member>
        <member name="M:Optional.Option`1.GetEnumerator">
            <summary>
            Returns an enumerator for the optional.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Optional.Option`1.Contains(`0)">
            <summary>
            Determines if the current optional contains a specified value.
            </summary>
            <param name="value">The value to locate.</param>
            <returns>A boolean indicating whether or not the value was found.</returns>
        </member>
        <member name="M:Optional.Option`1.Exists(System.Func{`0,System.Boolean})">
            <summary>
            Determines if the current optional contains a value 
            satisfying a specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>A boolean indicating whether or not the predicate was satisfied.</returns>
        </member>
        <member name="M:Optional.Option`1.ValueOr(`0)">
            <summary>
            Returns the existing value if present, and otherwise an alternative value.
            </summary>
            <param name="alternative">The alternative value.</param>
            <returns>The existing or alternative value.</returns>
        </member>
        <member name="M:Optional.Option`1.ValueOr(System.Func{`0})">
            <summary>
            Returns the existing value if present, and otherwise an alternative value.
            </summary>
            <param name="alternativeFactory">A factory function to create an alternative value.</param>
            <returns>The existing or alternative value.</returns>
        </member>
        <member name="M:Optional.Option`1.Or(`0)">
            <summary>
            Uses an alternative value, if no existing value is present.
            </summary>
            <param name="alternative">The alternative value.</param>
            <returns>A new optional, containing either the existing or alternative value.</returns>
        </member>
        <member name="M:Optional.Option`1.Or(System.Func{`0})">
            <summary>
            Uses an alternative value, if no existing value is present.
            </summary>
            <param name="alternativeFactory">A factory function to create an alternative value.</param>
            <returns>A new optional, containing either the existing or alternative value.</returns>
        </member>
        <member name="M:Optional.Option`1.Else(Optional.Option{`0})">
            <summary>
            Uses an alternative optional, if no existing value is present.
            </summary>
            <param name="alternativeOption">The alternative optional.</param>
            <returns>The alternative optional, if no value is present, otherwise itself.</returns>
        </member>
        <member name="M:Optional.Option`1.Else(System.Func{Optional.Option{`0}})">
            <summary>
            Uses an alternative optional, if no existing value is present.
            </summary>
            <param name="alternativeOptionFactory">A factory function to create an alternative optional.</param>
            <returns>The alternative optional, if no value is present, otherwise itself.</returns>
        </member>
        <member name="M:Optional.Option`1.WithException``1(``0)">
            <summary>
            Attaches an exceptional value to an empty optional.
            </summary>
            <param name="exception">The exceptional value to attach.</param>
            <returns>An optional with an exceptional value.</returns>
        </member>
        <member name="M:Optional.Option`1.WithException``1(System.Func{``0})">
            <summary>
            Attaches an exceptional value to an empty optional.
            </summary>
            <param name="exceptionFactory">A factory function to create an exceptional value to attach.</param>
            <returns>An optional with an exceptional value.</returns>
        </member>
        <member name="M:Optional.Option`1.Match``1(System.Func{`0,``0},System.Func{``0})">
            <summary>
            Evaluates a specified function, based on whether a value is present or not.
            </summary>
            <param name="some">The function to evaluate if the value is present.</param>
            <param name="none">The function to evaluate if the value is missing.</param>
            <returns>The result of the evaluated function.</returns>
        </member>
        <member name="M:Optional.Option`1.Match(System.Action{`0},System.Action)">
            <summary>
            Evaluates a specified action, based on whether a value is present or not.
            </summary>
            <param name="some">The action to evaluate if the value is present.</param>
            <param name="none">The action to evaluate if the value is missing.</param>
        </member>
        <member name="M:Optional.Option`1.MatchSome(System.Action{`0})">
            <summary>
            Evaluates a specified action if a value is present.
            </summary>
            <param name="some">The action to evaluate if the value is present.</param>
        </member>
        <member name="M:Optional.Option`1.MatchNone(System.Action)">
            <summary>
            Evaluates a specified action if no value is present.
            </summary>
            <param name="none">The action to evaluate if the value is missing.</param>
        </member>
        <member name="M:Optional.Option`1.Map``1(System.Func{`0,``0})">
            <summary>
            Transforms the inner value in an optional.
            If the instance is empty, an empty optional is returned.
            </summary>
            <param name="mapping">The transformation function.</param>
            <returns>The transformed optional.</returns>
        </member>
        <member name="M:Optional.Option`1.FlatMap``1(System.Func{`0,Optional.Option{``0}})">
            <summary>
            Transforms the inner value in an optional
            into another optional. The result is flattened, 
            and if either is empty, an empty optional is returned.
            </summary>
            <param name="mapping">The transformation function.</param>
            <returns>The transformed optional.</returns>
        </member>
        <member name="M:Optional.Option`1.FlatMap``2(System.Func{`0,Optional.Option{``0,``1}})">
            <summary>
            Transforms the inner value in an optional
            into another optional. The result is flattened, 
            and if either is empty, an empty optional is returned.
            If the option contains an exception, it is removed.
            </summary>
            <param name="mapping">The transformation function.</param>
            <returns>The transformed optional.</returns>
        </member>
        <member name="M:Optional.Option`1.Filter(System.Boolean)">
            <summary>
            Empties an optional if a specified condition
            is not satisfied.
            </summary>
            <param name="condition">The condition.</param>
            <returns>The filtered optional.</returns>
        </member>
        <member name="M:Optional.Option`1.Filter(System.Func{`0,System.Boolean})">
            <summary>
            Empties an optional if a specified predicate
            is not satisfied.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>The filtered optional.</returns>
        </member>
        <member name="M:Optional.Option`1.NotNull">
            <summary>
            Empties an optional if the value is null.
            </summary>
            <returns>The filtered optional.</returns>
        </member>
        <member name="M:Optional.Unsafe.OptionUnsafeExtensions.ToNullable``1(Optional.Option{``0})">
            <summary>
            Converts an optional to a Nullable&lt;T&gt;.
            </summary>
            <param name="option">The specified optional.</param>
            <returns>The Nullable&lt;T&gt; instance.</returns>
        </member>
        <member name="M:Optional.Unsafe.OptionUnsafeExtensions.ValueOrDefault``1(Optional.Option{``0})">
            <summary>
            Returns the existing value if present, otherwise default(T).
            </summary>
            <param name="option">The specified optional.</param>
            <returns>The existing value or a default value.</returns>
        </member>
        <member name="M:Optional.Unsafe.OptionUnsafeExtensions.ValueOrFailure``1(Optional.Option{``0})">
            <summary>
            Returns the existing value if present, or throws an OptionValueMissingException.
            </summary>
            <param name="option">The specified optional.</param>
            <returns>The existing value.</returns>
            <exception cref="T:Optional.Unsafe.OptionValueMissingException">Thrown when a value is not present.</exception>
        </member>
        <member name="M:Optional.Unsafe.OptionUnsafeExtensions.ToNullable``2(Optional.Option{``0,``1})">
            <summary>
            Converts an optional to a Nullable&lt;T&gt;.
            </summary>
            <param name="option">The specified optional.</param>
            <returns>The Nullable&lt;T&gt; instance.</returns>
        </member>
        <member name="M:Optional.Unsafe.OptionUnsafeExtensions.ValueOrDefault``2(Optional.Option{``0,``1})">
            <summary>
            Returns the existing value if present, otherwise default(T).
            </summary>
            <param name="option">The specified optional.</param>
            <returns>The existing value or a default value.</returns>
        </member>
        <member name="M:Optional.Unsafe.OptionUnsafeExtensions.ValueOrFailure``2(Optional.Option{``0,``1})">
            <summary>
            Returns the existing value if present, or throws an OptionValueMissingException.
            </summary>
            <param name="option">The specified optional.</param>
            <returns>The existing value.</returns>
            <exception cref="T:Optional.Unsafe.OptionValueMissingException">Thrown when a value is not present.</exception>
        </member>
        <member name="M:Optional.Unsafe.OptionUnsafeExtensions.ValueOrFailure``1(Optional.Option{``0},System.String)">
            <summary>
            Returns the existing value if present, or throws an OptionValueMissingException.
            </summary>
            <param name="option">The specified optional.</param>
            <param name="errorMessage">An error message to use in case of failure.</param>
            <returns>The existing value.</returns>
            <exception cref="T:Optional.Unsafe.OptionValueMissingException">Thrown when a value is not present.</exception>
        </member>
        <member name="M:Optional.Unsafe.OptionUnsafeExtensions.ValueOrFailure``1(Optional.Option{``0},System.Func{System.String})">
            <summary>
            Returns the existing value if present, or throws an OptionValueMissingException.
            </summary>
            <param name="option">The specified optional.</param>
            <param name="errorMessageFactory">A factory function generating an error message to use in case of failure.</param>
            <returns>The existing value.</returns>
            <exception cref="T:Optional.Unsafe.OptionValueMissingException">Thrown when a value is not present.</exception>
        </member>
        <member name="M:Optional.Unsafe.OptionUnsafeExtensions.ValueOrFailure``2(Optional.Option{``0,``1},System.String)">
            <summary>
            Returns the existing value if present, or throws an OptionValueMissingException.
            </summary>
            <param name="option">The specified optional.</param>
            <param name="errorMessage">An error message to use in case of failure.</param>
            <returns>The existing value.</returns>
            <exception cref="T:Optional.Unsafe.OptionValueMissingException">Thrown when a value is not present.</exception>
        </member>
        <member name="M:Optional.Unsafe.OptionUnsafeExtensions.ValueOrFailure``2(Optional.Option{``0,``1},System.Func{``1,System.String})">
            <summary>
            Returns the existing value if present, or throws an OptionValueMissingException.
            </summary>
            <param name="option">The specified optional.</param>
            <param name="errorMessageFactory">A factory function generating an error message to use in case of failure.</param>
            <returns>The existing value.</returns>
            <exception cref="T:Optional.Unsafe.OptionValueMissingException">Thrown when a value is not present.</exception>
        </member>
        <member name="T:Optional.Unsafe.OptionValueMissingException">
            <summary>
            Indicates a failed retrieval of a value from an empty optional.
            </summary>
        </member>
    </members>
</doc>
